// https://github.com/flucium/clap-rs-examples/blob/main/cat-rs.rs
use std::{
    fs,
    io::{self, stdout, Read, Write},
    path::PathBuf,
};

use clap::Parser;

#[derive(Parser)]
struct App {
    /// ...
    #[arg(long = "belnstuv", short = 'b')]
    belnstuv: bool,

    /// ...
    file: PathBuf,
}

fn main() -> io::Result<()> {
    let app = App::parse();

    let mut buf = String::new();
    fs::File::open(app.file)?.read_to_string(&mut buf)?;

    let lines = buf.split('\n').collect::<Vec<&str>>();

    // let lines_iter = lines.iter().enumerate();

    // for line in lines_iter {
    //     let string = if app.belnstuv {
    //         if line.1.is_empty(){
    //             format!("{}\n", line.1)
    //         }else{
    //             format!("{} {}\n", line.0, line.1)
    //         }

    //     } else {
    //         format!("{}\n", line.1)
    //     };
    //     stdout().write(string.as_bytes())?;
    // }
    let mut count = 0;

    for line in lines {
        
        let string = if line.is_empty() {
            format!("\n")
        } else {
            if app.belnstuv {
                count += 1;
                format!("{} {}\n", count, line)
            } else {
                format!("{}\n", line)
            }
        };
        stdout().write(string.as_bytes())?;
    }

    Ok(())
}
